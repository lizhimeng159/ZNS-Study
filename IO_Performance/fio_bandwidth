#! /bin/bash

set -e

if [[ "$#" -ne "1" ]]; then echo "Requires device name (e.g. nvme2n2) argument" && exit; fi

DATA_DIR="data/bandwidth"
QUEUE_DEPTHS=(1 2 4 8 16 32 64 128 256 512 1024)
# fio would stop once ns is full hence we use zone size instead of capacity
SIZE=$(echo "scale=0;$DEV_ZONE_SIZE*$DEV_SECT_SIZE*$DEV_ZONES" | bc)
RUNTIME="5s"
BS="4K"


mkdir -p $DATA_DIR
cd $DATA_DIR && rm -f *

for depth in ${QUEUE_DEPTHS[@]}; do
    echo "Running benchmarks with Queue Depth: $depth"
    blkzone reset /dev/$DEV # make sure ns is empty
    fio --name=$(echo "${DEV}_randwrite_${BS}_queue-depth-${depth}") --output=$(echo "${DEV}_randwrite_${BS}_queue-depth-${depth}.json") --output-format=json --filename=/dev/$DEV --direct=1 --size=$SIZE --ioengine=libaio --zonemode=zbd --iodepth=$depth --rw=randwrite --bs=$BS --max_open_zones=$DEV_MAX_ACTIVE_ZONES --runtime=$RUNTIME
    blkzone reset /dev/$DEV # make sure ns is empty
    fio --name=$(echo "${DEV}_write_${BS}_queue-depth-${depth}") --output=$(echo "${DEV}_write_${BS}_queue-depth-${depth}.json") --output-format=json --filename=/dev/$DEV --direct=1 --size=$SIZE --ioengine=libaio --zonemode=zbd --iodepth=$depth --rw=write --bs=$BS --runtime=$RUNTIME

    # Fill entire ns for reading
    echo "Refilling entire namespace for read benchs"
    fio --name=zns-fio --filename=/dev/$DEV --direct=1 --size=$SIZE --ioengine=libaio --zonemode=zbd --iodepth=4 --rw=write --bs=512K > /dev/null

    fio --name=$(echo "${DEV}_read_${BS}_queue-depth-${depth}") --output=$(echo "${DEV}_read_${BS}_queue-depth-${depth}.json") --output-format=json --filename=/dev/$DEV --direct=1 --size=$SIZE --ioengine=libaio --zonemode=zbd --iodepth=$depth --rw=read --bs=$BS --runtime=$RUNTIME
    fio --name=$(echo "${DEV}_randread_${BS}_queue-depth-${depth}") --output=$(echo "${DEV}_randread_${BS}_queue-depth-${depth}.json") --output-format=json --filename=/dev/$DEV --direct=1 --size=$SIZE --ioengine=libaio --zonemode=zbd --iodepth=$depth --rw=randread --bs=$BS --runtime=$RUNTIME
    fio --name=$(echo "${DEV}_overwrite-seq_${BS}_queue-depth-${depth}") --output=$(echo "${DEV}_overwrite-seq_${BS}_queue-depth-${depth}.json") --output-format=json --filename=/dev/$DEV --direct=1 --size=$SIZE --ioengine=libaio --zonemode=zbd --iodepth=$depth --rw=write --bs=$BS --runtime=$RUNTIME
    fio --name=$(echo "${DEV}_overwrite-rand_${BS}_queue-depth-${depth}") --output=$(echo "${DEV}_overwrite-rand_${BS}_queue-depth-${depth}.json") --output-format=json --filename=/dev/$DEV --direct=1 --size=$SIZE --ioengine=libaio --zonemode=zbd --iodepth=$depth --rw=randwrite --bs=$BS --max_open_zones=$DEV_MAX_ACTIVE_ZONES --runtime=$RUNTIME
done
